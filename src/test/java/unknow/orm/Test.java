package unknow.orm;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.io.*;
import java.net.*;
import java.nio.file.*;
import java.sql.*;
import java.util.*;

import javax.naming.*;

import org.junit.*;

import unknow.common.*;
import unknow.common.tools.*;
import unknow.json.*;
import unknow.orm.mapping.*;

public class Test
	{
	public static Database db;

	public static void main(String[] arg) throws ClassNotFoundException, ClassCastException, InstantiationException, IllegalAccessException, FileNotFoundException, SQLException, JsonException, NamingException
		{
		init();
		new Test().insert();
		}

	@BeforeClass
	public static void init() throws SQLException, ClassNotFoundException, ClassCastException, InstantiationException, IllegalAccessException, JsonException, NamingException, FileNotFoundException
		{
		// creating test db
		Connection co=DriverManager.getConnection("jdbc:derby:test;create=true");
		Statement st=co.createStatement();
		st.execute("create table test (id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(20), value integer)");
		st.close();
		co.close();
		Mappings.load("", Cfg.getSystem());

		db=Mappings.getDatabase("test");

		assertNotNull("failed to load test database", db);
		}

	@org.junit.Test
	public void insert() throws SQLException
		{
		TestEntity t=new TestEntity(50, "test", 1);

		db.insert(t);

		try (Query q=db.createQuery("select {t} from test t where id=?", new String[] {"t"}, new Class[] {TestEntity.class}))
			{
			q.setInt(1, t.id);
			QueryResult rs=q.execute();

			if(rs.next())
				{
				TestEntity e=rs.getEntity("t");

				assertEquals("retreiving object!=inserted", e, t);
				}
			}
		}

	@After
	public void delete() throws SQLException
		{
		db.createQuery("delete from test").executeUpdate();
		}

	@AfterClass
	public static void cleanUp() throws IOException
		{
		// removing database
		FileUtils.deleteAll(Paths.get("test"));
		}
	}
