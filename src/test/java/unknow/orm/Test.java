package unknow.orm;

import static org.junit.Assert.*;

import java.io.*;
import java.nio.file.*;
import java.sql.*;

import javax.naming.*;

import org.junit.*;
import org.junit.rules.*;

import unknow.common.*;
import unknow.common.tools.*;
import unknow.json.*;
import unknow.orm.criteria.*;
import unknow.orm.mapping.*;

public class Test
	{
	public static Database db;

	@Rule
	public ExpectedException thrown=ExpectedException.none();

	@BeforeClass
	public static void init() throws SQLException, ClassNotFoundException, ClassCastException, InstantiationException, IllegalAccessException, JsonException, NamingException, FileNotFoundException
		{
		if(!Files.exists(Paths.get("target/db")))
			{
			// creating test db
			Connection co=DriverManager.getConnection("jdbc:derby:target/db;create=true");
			Statement st=co.createStatement();
			st.execute("create table test (id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(20), value integer)");
			st.close();
			co.close();
			}
		Mappings.load("", Cfg.getSystem());

		db=Mappings.getDatabase("db");

		assertNotNull("failed to load test database", db);
		}

	@org.junit.Test
	public void insert() throws SQLException
		{
		TestEntity t=new TestEntity(50, "test", 1);

		db.insert(t);

		try (Query q=db.createQuery("select {t} from test t where id=?", new String[] {"t"}, new Class[] {TestEntity.class}))
			{
			q.setInt(1, t.id);
			QueryResult rs=q.execute();

			assertTrue(rs.next());
			TestEntity e=rs.getEntity("t");

			assertEquals("retreiving object!=inserted", t, e);

			assertFalse(rs.next());
			}
		}

	@org.junit.Test
	public void insertAutoIncrement() throws SQLException
		{
		TestEntity t=new TestEntity(null, "test", 1);

		db.insert(t);
		assertNotNull("failed to set autogenerated key", t.id);

		try (Query q=db.createQuery("select {t} from test t where id=?", new String[] {"t"}, new Class[] {TestEntity.class}))
			{
			q.setInt(1, t.id);
			QueryResult rs=q.execute();

			assertTrue("failed to get generated object", rs.next());

			TestEntity e=rs.getEntity("t");

			assertEquals("retreiving object!=inserted", e, t);

			assertFalse(rs.next());
			}
		}

	@org.junit.Test
	public void insertUpdate() throws SQLException
		{
		TestEntity t=new TestEntity(5, "test", 1);

		db.insert(t);

		t.value=2;

		db.update(t);

		try (Query q=db.createQuery("select {t} from test t where id=?", new String[] {"t"}, new Class[] {TestEntity.class}))
			{
			q.setInt(1, t.id);
			QueryResult rs=q.execute();

			assertTrue("failed to retrieve updated object", rs.next());

			TestEntity e=rs.getEntity("t");

			assertEquals("retreiving object!=inserted", (int)e.value, 2);

			assertFalse(rs.next());
			}
		}

	@org.junit.Test
	public void insertError() throws SQLException
		{
		thrown.expect(SQLException.class);
		TestEntity t=new TestEntity(5, "test", 1);
		db.insert(t);
		db.insert(t); // SQLException duplicate entry
		}

	@org.junit.Test
	public void criteriaSimple() throws SQLException
		{
		TestEntity t=new TestEntity(5, "test", 1);
		db.insert(t);

		Criteria crit=db.createCriteria(TestEntity.class);
		crit.add(Restriction.eq("name", "test"));
		try (QueryResult rs=crit.execute())
			{
			assertTrue("result not found", rs.next());
			TestEntity e=rs.getEntity("this");
			assertEquals(t, e);
			assertFalse(rs.next());
			}
		}

	@org.junit.Test
	public void criteriaComplex() throws SQLException
		{
		TestEntity t=new TestEntity(5, "test", 1);
		db.insert(t);

		Criteria crit=db.createCriteria(TestEntity.class, "a");
		crit.add(Restriction.eq("name", "test"));
		crit.setProjection(Projection.keys());

		try (QueryResult rs=crit.execute())
			{
			assertTrue("result not found", rs.next());
			Integer e=rs.getInt("a.id");
			assertEquals(t.id, e);
			assertFalse(rs.next());
			}
		}

	@org.junit.Test
	public void criteriaPartial() throws SQLException
		{
		TestEntity t=new TestEntity(5, "test", 1);
		db.insert(t);

		Criteria crit=db.createCriteria(TestEntity.class, "a");
		crit.add(Restriction.eq("name", t.name));
		crit.setProjection(Projection.property("name"));

		try (QueryResult rs=crit.execute())
			{
			assertTrue("result not found", rs.next());
			TestEntity e=rs.getEntity("a");
			assertEquals(t.name, e.name);
			assertNull(e.id);
			assertNull(e.value);
			assertFalse(rs.next());
			}
		}

	@org.junit.Test
	public void criteriaJoin() throws SQLException
		{
		TestEntity t=new TestEntity(5, "test", 1);
		db.insert(t);

		Criteria crit=db.createCriteria(TestEntity.class, "a");
		crit.add(Restriction.eq("name", "test"));
		Join j=crit.addJoin(TestEntity.class, "b");
		j.on(On.eq("id", "id")); // join on self a==b

		try (QueryResult rs=crit.execute())
			{
			assertTrue("result not found", rs.next());
			TestEntity e=rs.getEntity("a");
			assertEquals(t, e);
			assertFalse(rs.next());
			}
		}

	@org.junit.Test
	public void criteriaJoinComplex() throws SQLException
		{
		TestEntity t=new TestEntity(5, "test", 1);
		db.insert(t);
		TestEntity t2=new TestEntity(6, "b", 1);
		db.insert(t2);

		Criteria crit=db.createCriteria(TestEntity.class, "a");
		crit.add(Restriction.eq("name", "test"));
		Join j=crit.addJoin(TestEntity.class, "b");
		j.on(On.eq("value", "value"));
		j.add(Restriction.eq("id", 6));
		j.setProjection(Projection.keys());

		try (QueryResult rs=crit.execute())
			{
			assertTrue("result not found", rs.next());
			TestEntity e=rs.getEntity("a");
			assertEquals(t, e);

			e=rs.getEntity("b");
			assertEquals(t2.id, e.id);
			assertNull(e.name);
			assertNull(e.value);

			assertFalse(rs.next());
			}
		}

	@After
	public void delete() throws SQLException
		{
		db.createQuery("delete from test").executeUpdate();
		}
	}
